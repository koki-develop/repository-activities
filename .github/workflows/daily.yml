name: Daily

permissions: {}

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *' # every day at 00:00 UTC

jobs:
  get-date:
    runs-on: ubuntu-latest
    outputs:
      date: ${{ steps.get-date.outputs.date }}
    steps:
      - name: Get date
        id: get-date
        run: echo "date=$(date +%Y-%m-%d)" >> "${GITHUB_OUTPUT}"

  list-repositories:
    runs-on: ubuntu-latest
    outputs:
      json: ${{ steps.list.outputs.json }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: List repositories
        id: list
        env:
          REPOSITORIES: |
            - hashicorp/terraform
            - hashicorp/terraform-provider-aws
        run: |
          {
            echo "json<<EOF"
            cat repositories.yml | yq --output-format json
            echo EOF
          } >> "${GITHUB_OUTPUT}"

  summarize:
    needs:
      - get-date
      - list-repositories
    uses: ./.github/workflows/_summarize.yml
    strategy:
      max-parallel: 1
      matrix:
        repository: ${{ fromJson(needs.list-repositories.outputs.json) }}
    permissions:
      contents: write
      models: read
    with:
      date: ${{ needs.get-date.outputs.date }}
      repository: ${{ matrix.repository }}
    secrets:
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  generate-release-note:
    needs:
      - get-date
      - list-repositories
      - summarize
    runs-on: ubuntu-latest
    outputs:
      release-note: ${{ fromJson(steps.generate.outputs.result) }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Fetch and rebase
        run: |
          git fetch origin main
          git rebase origin/main
      - name: Generate release note
        id: generate
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        env:
          DATE: ${{ needs.get-date.outputs.date }}
          REPOSITORIES_JSON: ${{ needs.list-repositories.outputs.json }}
        with:
          script: |
            const { DATE, REPOSITORIES_JSON } = process.env;
            const fs = require("fs");
            const repositories = JSON.parse(REPOSITORIES_JSON);
            const filtered = repositories.filter((repository) => {
              return fs.existsSync(`${repository}/${DATE}.md`);
            });

            const lines = [];
            if (filtered.length > 0) {
              for (const repository of filtered) {
                lines.push(`- [${repository}](https://github.com/koki-develop/repository-activities/blob/${DATE}/${repository}/${DATE}.md)`);
              }
            } else {
              lines.push("No updates");
            }
            return lines.join("\n");
      - name: Print release note
        env:
          RELEASE_NOTE: ${{ fromJson(steps.generate.outputs.result) }}
        run: echo "${RELEASE_NOTE}"

  create-release:
    needs:
      - summarize
      - get-date
      - generate-release-note
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Update tag and release
        env:
          GH_TOKEN: ${{ github.token }}
          DATE: ${{ needs.get-date.outputs.date }}
          RELEASE_NOTE: ${{ needs.generate-release-note.outputs.release-note }}
        run: |
          git fetch origin main
          git rebase origin/main

          git tag -f "${DATE}"
          git push -f origin "${DATE}"

          if gh release view "${DATE}" &>/dev/null; then
            gh release edit "${DATE}" \
              --notes "${RELEASE_NOTE}"
          else
            gh release create "${DATE}" \
              --notes "${RELEASE_NOTE}" \
              --latest
          fi
