name: Weekly

permissions: {}

on:
  workflow_dispatch:

jobs:
  get-date:
    runs-on: ubuntu-latest
    outputs:
      date: ${{ steps.get-date.outputs.date }}
    steps:
      - name: Get date
        id: get-date
        run: echo "date=$(date +%Y-%m-%d)" >> "${GITHUB_OUTPUT}"

  list-repositories:
    runs-on: ubuntu-latest
    outputs:
      json: ${{ steps.list.outputs.json }}
    steps:
      - uses: actions/checkout@v4
      - name: List repositories
        id: list
        env:
          REPOSITORIES: |
            - hashicorp/terraform
            - hashicorp/terraform-provider-aws
        run: |
          {
            echo "json<<EOF"
            cat repositories.yml | yq --output-format json
            echo EOF
          } >> "${GITHUB_OUTPUT}"

  summarize:
    needs:
      - get-date
      - list-repositories
    uses: ./.github/workflows/_summarize.yml
    strategy:
      max-parallel: 1
      matrix:
        repository: ${{ fromJson(needs.list-repositories.outputs.json) }}
    permissions:
      contents: write
      models: read
    with:
      date: ${{ needs.get-date.outputs.date }}
      repository: ${{ matrix.repository }}

  generate-release-note:
    needs:
      - get-date
      - list-repositories
    runs-on: ubuntu-latest
    outputs:
      release-note: ${{ fromJson(steps.generate.outputs.result) }}
    steps:
      - name: Generate release note
        id: generate
        uses: actions/github-script@v7
        env:
          DATE: ${{ needs.get-date.outputs.date }}
          REPOSITORIES_JSON: ${{ needs.list-repositories.outputs.json }}
        with:
          script: |
            const { DATE, REPOSITORIES_JSON } = process.env;
            const repositories = JSON.parse(REPOSITORIES_JSON);

            const lines = [];
            for (const repository of repositories) {
              lines.push(`- [${repository}](https://github.com/koki-develop/repository-activities-weekly/tree/main/${repository}/${DATE}.md)`);
            }
            return lines.join("\n");
      - name: Print release note
        env:
          RELEASE_NOTE: ${{ fromJson(steps.generate.outputs.result) }}
        run: echo "${RELEASE_NOTE}"

  create-release:
    needs:
      - summarize
      - get-date
      - generate-release-note
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create release
        env:
          GH_TOKEN: ${{ github.token }}
          DATE: ${{ needs.get-date.outputs.date }}
          RELEASE_NOTE: ${{ needs.generate-release-note.outputs.release-note }}
        run: |
          gh release create "${DATE}" \
            --notes "${RELEASE_NOTE}" \
            --latest
